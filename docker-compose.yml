version: '3'
services:

  #PHP Service
  app:
    build:
      context: ./php
      dockerfile: Dockerfile
    image: php:lempassessment
    container_name: app
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - ./src:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./php/fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
    ports:
      - "9773:9773"      
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"        

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    image: redis:lempassessment
    container_name: redis
    networks:
      - app-network    
    ports:
      - "6378:6378"
    volumes:     
      #- rdsdata:/data
      - ./redis/data:/data

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog   
    networks:
      - app-network     
    ports:
      - "1025:1025"
      - "8025:8025"      

  #Nginx Service
  webserver:
    build:
      context: ./nginx
      dockerfile: Dockerfile    
    image: nginx:lempassessment
    depends_on:
      - app    
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./src:/var/www
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network     

  #Nginx Service
  frontend:
    image: nginx
    container_name: frontend
    restart: unless-stopped
    tty: true
    ports:
      - "1234:80"
    volumes:
      - ./src/frontend/public:/usr/share/nginx/html
    networks:
      - app-network      

  browser_tester:
    image: selenium/standalone-chrome:3.141.59-oxygen
    container_name: browser_tester    
    depends_on:
      - app
    ports:
      - "4444:4444"      
    networks:
      - app-network   

  #MySQL Service
  db:
    build:
      context: ./mysql
      dockerfile: Dockerfile     
    image: mysql:lempassessment
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      #- dbdata:/var/lib/mysql/
      - ./mysql/data:/var/lib/mysql/
      #- ./mysql/my.cnf:/etc/mysql/my.cnf:ro
    networks:
      - app-network

  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - '8888:80'
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      UPLOAD_LIMIT: 50M
    networks:
      - app-network       

  # netdata:
  #   image: netdata/netdata
  #   container_name: netdata
  #   hostname: localhost # set to fqdn of host
  #   ports:
  #     - 19999:19999
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     #- ./netdata/netdataconfig:/etc/netdata
  #     # - ./netdata/netdataconfig/mysql.conf:/etc/netdata/python.d/mysql.conf
  #     - ./netdata/netdatalib:/var/lib/netdata
  #     - ./netdata/netdatacache:/var/cache/netdata
  #     - /etc/passwd:/host/etc/passwd:ro
  #     - /etc/group:/host/etc/group:ro
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /etc/os-release:/host/etc/os-release:ro    
  #   networks:
  #     - app-network        

  # ngrok:
  #   image: shkoliar/ngrok:latest
  #   ports:
  #     - 4551:4551
  #   links:
  #     - webserver
  #   container_name: ngrok
  #   environment:
  #     - DOMAIN=webserver
  #     - PORT=80
  #   networks:
  #     - app-network 
  
  # sonarqube:
  #   image: sonarqube:8.9.0-community
  #   container_name: sonarqube
  #   hostname: sonarqube
  #   ports:
  #     - 9000:9000
  #   environment:
  #     - sonar.jdbc.username=sonar
  #     - sonar.jdbc.password=sonar
  #     - sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false
  #   volumes:
  #     - ./sonarqube/logs:/opt/sonarqube/logs
  #     - ./sonarqube/data:/opt/sonarqube/data
  #     - ./sonarqube/extensions:/opt/sonarqube/extensions
  #   networks:
  #     - app-network  

  # postgresdb:
  #   image: postgres
  #   container_name: postgresdb
  #   hostname: postgresdb
  #   environment:
  #     - POSTGRES_USER=sonar
  #     - POSTGRES_PASSWORD=sonar
  #     - PGDATA=/tmp      
  #   volumes:
  #     - ./postgres/pgdata:/var/lib/postgresql/data
  #   networks:
  #     - app-network  

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080  
  #   networks:
  #     - app-network              

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
# volumes:
#   dbdata:
#     driver: local
#   rdsdata:
#     driver: local
#   pgdb:
#     driver: local
#   pgdata:
#     driver: local    
#   netdatalib:
#     driver: local
#   netdatacache:  
#     driver: local  